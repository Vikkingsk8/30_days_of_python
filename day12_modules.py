# # main.py file
# # —Å–æ–∑–¥–∞–ª —Ñ–∞–π–ª my_module –≤ –∫–æ—Ç–æ—Ä–æ–º –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è generate_full_name
# import my_module # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å —Å —Ñ—É–Ω–∫—Ü–∏–µ–π
# print(my_module.generate_full_name('Viktor', 'Ermilov')) # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –º–æ–¥—É–ª—è –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç Viktor Ermilov

# from math import *
# print(sqrt(144))
# import random
# import re
# print(random.random())
# print(random.randint(r'abc', 10))

# üíª –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: –î–µ–Ω—å 12
# –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: –£—Ä–æ–≤–µ–Ω—å 1
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —à–µ—Å—Ç–∏–∑–Ω–∞—á–Ω—ã–π/—Å–∏–º–≤–æ–ª—å–Ω—ã–π random_user_id.
from random import *
from string import *
def random_user_id():
    s = ''
    charters = ascii_letters + digits
    for _ in range(6):
        s+=choice(charters) 
    
    return s
print(random_user_id())
#-------------------------------------------------------------------------------------
# –ò–∑–º–µ–Ω–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É. 
# –û–±—ä—è–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Å –∏–º–µ–Ω–µ–º user_id_gen_by_user. 
# –û–Ω–∞ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –≤—Ö–æ–¥–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ input().
# –û–¥–Ω–æ –∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤, –∞ –≤—Ç–æ—Ä–æ–µ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤,
# –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å.

def user_id_gen_by_user(symbols, ident):
    res = ''
    charters = ascii_letters+digits
    for _ in range(ident):
        for _ in range(symbols):
            res+=choice(charters) 
        res += '\n'
    
    return res

#print(user_id_gen_by_user(symbols=int(input()), ident=int(input())))
#-------------------------------------------------------------------------------------
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é rgb_color_gen. 
# –û–Ω–∞ –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å RGB-—Ü–≤–µ—Ç–∞ (—Ç—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç 0 –¥–æ 255 –∫–∞–∂–¥–æ–µ).
def rgb_color_gen():
    lst = []
    for i in range(3):
        lst.append(str(randint(0,255)))
    return f'rgb({lst[0]},{lst[1]},{lst[2]})'

print(rgb_color_gen())
# # rgb(125,244,255) - the output should be in this form
#----------------------------------------------------------------------------------------
# –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: –£—Ä–æ–≤–µ–Ω—å 2
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é list_of_hexa_colors, 
# –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ 
# (—à–µ—Å—Ç—å —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—ã—Ö —á–∏—Å–µ–ª, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ #. –®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å—á–∏—Å–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 16 —Å–∏–º–≤–æ–ª–æ–≤,
# 0-9 –∏ –ø–µ—Ä–≤—ã—Ö 6 –±—É–∫–≤ –∞–ª—Ñ–∞–≤–∏—Ç–∞, af. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–¥–∞–Ω–∏–µ 6 –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤ –≤—ã–≤–æ–¥–∞).
def list_of_hexa_colors():
    lst = []
    charters = digits + 'ABCDEF'
    for _ in range(6):
        res = '#'
        for _ in range(6):
            res+=choice(charters) 
        lst.append(res)
    
    return lst
print(list_of_hexa_colors())
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é list_of_rgb_colors, 
# –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤ RGB –≤ –º–∞—Å—Å–∏–≤–µ.
def list_of_rgb_colors():
    lst = []
    for _ in range(3):
        lst.append(f'rgb({randint(0,255)}, {randint(0,255)},{randint(0,255)})')
    return lst

print(list_of_rgb_colors())
#------------------------------------------------------------------------------------
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é generate_colors, 
# –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HEX –∏–ª–∏ RGB.
#    generate_colors('hexa', 3) # ['#a3e12f','#03ed55','#eb3d2b'] 
#    generate_colors('hexa', 1) # ['#b334ef']
#    generate_colors('rgb', 3)  # ['rgb(5, 55, 175','rgb(50, 105, 100','rgb(15, 26, 80'] 
#    generate_colors('rgb', 1)  # ['rgb(33,79, 176)']
def generate_colors(mode, count):
    lst = []
    if mode == 'hexa':
        charters = digits + 'ABCDEF'
        for _ in range(count):
            res = '#'
            for _ in range(6):
                res+=choice(charters) 
            lst.append(res)
        return lst
    else:
        for _ in range(3):
            lst.append(f'rgb({randint(0,255)}, {randint(0,255)},{randint(0,255)})')
        return lst

print(generate_colors('hexa', 3))
print(generate_colors('rgb', 3))
#-------------------------------------------------------------------------------
# –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: –£—Ä–æ–≤–µ–Ω—å 3
# –í—ã–∑–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é shuffle_list, 
# –æ–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.
def shuffle_list(lst):
    shuffle(lst)
    return lst
print(shuffle_list(['v','f','a','t',1,23,4]))
#---------------------------------------------------------------------------------
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, 
# –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏–∑ —Å–µ–º–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 9.
# –í—Å–µ —á–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏.
def random_digits():
    lst = []
    while len(lst) < 7:
        elem = randint(0, 9)
        if elem not in lst:
            lst.append(elem)

    return lst

print(random_digits())
    