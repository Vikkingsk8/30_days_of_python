# üíª –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: –î–µ–Ω—å 11
#-------------------------------------------------------
# –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: –£—Ä–æ–≤–µ–Ω—å 1
# –û–±—ä—è–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é add_two_numbers . –û–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É.
def add_two_numbers(n1, n2):
    return n1+n2

print(add_two_numbers(2,2))
#--------------------------------------------------------------------
# –ü–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º: –ø–ª–æ—â–∞–¥—å = œÄ x r x r. –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤—ã—á–∏—Å–ª—è–µ—Ç –ø–ª–æ—â–∞–¥—å_–∫—Ä—É–≥–∞ .
def squre_circle(p, r):
    return p*r**2

print(squre_circle(3, 5))
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é add_all_nums, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ —Å—É–º–º–∏—Ä—É–µ—Ç –∏—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —è–≤–ª—è—é—Ç—Å—è –ª–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ —á–∏—Å–ª–æ–≤—ã–º–∏. –ï—Å–ª–∏ –Ω–µ—Ç, –¥–∞–π—Ç–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç.
def add_all_nums(*args):
    summa = 0
    for n in args:
        if not isinstance(n, int):
            print(f'{n} –Ω–µ —á–∏—Å–ª–æ')
            n = int(n)
            summa+=n
        else:
            summa+=n
    return summa
print(add_all_nums(3,4,5,6,22,1,2))
#----------------------------------------------------------------------------------
# –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∏–∑ ¬∞C –º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å 
# –≤ ¬∞F —Å –ø–æ–º–æ—â—å—é —Å–ª–µ–¥—É—é—â–µ–π —Ñ–æ—Ä–º—É–ª—ã: ¬∞F = (¬∞C x 9/5) + 32. 
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç ¬∞C –≤ ¬∞F, convert_celsius_to-fahrenheit .
def converter_C_to_F(c):
    return (c*9/5) + 32

print(converter_C_to_F(23))
#------------------------------------------------------------------------------------
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Å –∏–º–µ–Ω–µ–º check-season, 
# –æ–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –º–µ—Å—è—Ü–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ–∑–æ–Ω: –æ—Å–µ–Ω—å, –∑–∏–º–∞, –≤–µ—Å–Ω–∞ –∏–ª–∏ –ª–µ—Ç–æ.
def check_season(month):
    –∑–∏–º–∞ = ['–¥–µ–∫–∞–±—Ä—å', '—è–Ω–≤–∞—Ä—å', '—Ñ–µ–≤—Ä–∞–ª—å']
    –≤–µ—Å–Ω–∞ = ['–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª—å', '–º–∞–π']
    –ª–µ—Ç–æ = ['–∏—é–Ω—å', '–∏—é–ª—å', '–∞–≤–≥—É—Å—Ç']
    –æ—Å–µ–Ω—å = ['—Å–µ–Ω—Ç—è–±—Ä—å', '–æ–∫—Ç—è–±—Ä—å', '–Ω–æ—è–±—Ä—å']
    if month in –∑–∏–º–∞:
        print('winter')
    elif month in –≤–µ—Å–Ω–∞:
        print('spring')
    elif month in –ª–µ—Ç–æ:
        print('summer')
    else:
        print('autmn')
#-------------------------------------------------------------------------------
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º calculate_slope, 
# –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∫–ª–æ–Ω –ª–∏–Ω–µ–π–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è.
def calculate_slope(x1,x2,y1,y2):
    return (y2-y1)/(x2-x1)

print(calculate_slope(1,2,3,4))
#------------------------------------------------------------------------------
# –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º: ax¬≤ + bx + c = 0. 
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤—ã—á–∏—Å–ª—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–∏–π –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è,
#  solve_quadratic_eqn .
def solve_quadratic_eqn(a, b, c):
    #a*x**2 + b * x + c = 0
    D = b**2 - 4*a*c
    if D > 0:
        print('–¥–≤–∞ –∫–æ—Ä–Ω—è')
        x1 = (-b + D**0.5)/(2*a)
        x2 = (-b - D**0.5)/(2*a)
        return x1, x2
    elif D == 0:
        print("–æ–¥–∏–Ω –∫–æ—Ä–µ–Ω—å")
        x1 = -b/(2*a)
        return x1
    else:
        return '–Ω–µ—Ç –∫–æ—Ä–Ω–µ–π'

print(solve_quadratic_eqn(1,-3,2))
#-------------------------------------------------------------------------------
# –û–±—ä—è–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Å –∏–º–µ–Ω–µ–º print_list.
# –û–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç –∫–∞–∂–¥—ã–π –µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç.
def print_list(lst=[]):
    for i in lst:
        print(i)
    
print_list([3,2,5,2,1])
#--------------------------------------------------------------------------------------
# –û–±—ä—è–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Å –∏–º–µ–Ω–µ–º reverse_list. 
# –û–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –æ–±—Ä–∞—Ç–Ω—ã–π –≤–∏–¥ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏–∫–ª—ã).
# print(reverse_list([1, 2, 3, 4, 5]))
def reverse_list(lst=[]):
    l = []
    for i in range(len(lst)-1, -1, -1):
        l.append(lst[i])
    return l
print(reverse_list([1, 2, 3, 4, 5]))
# # [5, 4, 3, 2, 1]
print(reverse_list(["A", "B", "C"]))
# # ["C", "B", "A"]
#---------------------------------------------------------------------------------------
# –û–±—ä—è–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Å –∏–º–µ–Ω–µ–º capitalize_list_items. –û–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –Ω–∞–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏.
def capitalize_list_items(lst=[]):
    l = []
    for i in lst:
        l.append(i.capitalize())
    return l
print(capitalize_list_items(['a','b','c']))
#-----------------------------------------------------------------------------------------
# –û–±—ä—è–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Å –∏–º–µ–Ω–µ–º add_item. –û–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–ø–∏—Å–æ–∫ –∏ —ç–ª–µ–º–µ–Ω—Ç.
# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –≤ –∫–æ–Ω—Ü–µ.
def add_item(lst, item):
    lst.append(item)
    return lst

food_staff = ['Potato', 'Tomato', 'Mango', 'Milk']
print(add_item(food_staff, 'Meat'))     # ['Potato', 'Tomato', 'Mango', 'Milk','Meat']
numbers = [2, 3, 7, 9]
print(add_item(numbers, 5))      #[2, 3, 7, 9, 5]
#---------------------------------------------------------------------------------------
# –û–±—ä—è–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Å –∏–º–µ–Ω–µ–º remove_item. 
# –û–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–ø–∏—Å–æ–∫ –∏ —ç–ª–µ–º–µ–Ω—Ç. 
# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å —É–¥–∞–ª—ë–Ω–Ω—ã–º –∏–∑ –Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–º.
def remove_item(lst, item):
    lst.remove(item)
    return lst

food_staff = ['Potato', 'Tomato', 'Mango', 'Milk']
print(remove_item(food_staff, 'Mango'))  # ['Potato', 'Tomato', 'Milk'];
numbers = [2, 3, 7, 9]
print(remove_item(numbers, 3))  # [2, 7, 9]
#------------------------------------------------------------------------------------------
# –û–±—ä—è–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Å –∏–º–µ–Ω–µ–º sum_of_numbers. 
# –û–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∏ —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç –≤—Å–µ —á–∏—Å–ª–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.
def sum_of_numbers(n):
    sum = 0
    for i in range(1,n+1):
        sum += i
    return sum
print(sum_of_numbers(5))  # 15
print(sum_of_numbers(10)) # 55
print(sum_of_numbers(100)) # 5050
#----------------------------------------------------------------------------------------
# –û–±—ä—è–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Å –∏–º–µ–Ω–µ–º sum_of_odds. 
# –û–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∏ —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–µ—á—ë—Ç–Ω—ã–µ —á–∏—Å–ª–∞ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.
def sum_of_odds(n):
    sum = 0
    for i in range(1, n, 2):
        sum += i
    return sum
print(sum_of_odds(10))
#-----------------------------------------------------------------------------------------
# –û–±—ä—è–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Å –∏–º–µ–Ω–µ–º sum_of_even. 
# –û–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∏ —Å—É–º–º–∏—Ä—É–µ—Ç –≤—Å–µ —á—ë—Ç–Ω—ã–µ —á–∏—Å–ª–∞ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.
def sum_of_even(n):
    sum = 0
    for i in range(0, n, 2):
        sum += i
    return sum
print(sum_of_even(10))
#----------------------------------------------------------------------------------------
# –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: –£—Ä–æ–≤–µ–Ω—å 2
# –û–±—ä—è–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é evens_and_odds. 
# –û–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∏ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á—ë—Ç–Ω—ã—Ö –∏ –Ω–µ—á—ë—Ç–Ω—ã—Ö —á–∏—Å–µ–ª –≤ —á–∏—Å–ª–µ.
def evens_and_odds(n):
    odds = 0
    even = 0
    for i in range(n+1):
        if i % 2==0:
            even+=1
        else:
            odds+=1
    return f'The number of odds are {odds}.\nThe number of evens are {even}.'
print(evens_and_odds(100))
    # The number of odds are 50.
    # The number of evens are 51.
#----------------------------------------------------------------------------
# –ù–∞–∑–æ–≤–∏—Ç–µ —Å–≤–æ—é —Ñ—É–Ω–∫—Ü–∏—é —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–º, 
# –æ–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞.
def factorial(n):
    import math
    return math.factorial(n)

print(factorial(5))
#--------------------------------------------------------------------------------
# –í—ã–∑–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_empty , 
# –æ–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω –ø—É—Å—Ç—ã–º –∏–ª–∏ –Ω–µ—Ç.
def is_empty(s):
    return len(s)==1
print(is_empty(''))
#------------------------------------------------------------------------------------------
# –ù–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏. 
# –û–Ω–∏ –¥–æ–ª–∂–Ω—ã –≤—ã—á–∏—Å–ª—è—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (calculate_mean), 
# –º–µ–¥–∏–∞–Ω—É (calculate_median), 
# –º–æ–¥—É (calculate_mode), 
# –¥–∏–∞–ø–∞–∑–æ–Ω (calculate_range), 
# –¥–∏—Å–ø–µ—Ä—Å–∏—é (calculate_variance), 
# —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (calculate_std).

import statistics
from collections import Counter
import math

def calculate_mean(numbers):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞.
    
    Args:
        numbers: —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
        
    Returns:
        float: —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    """
    if not numbers:
        return 0
    return sum(numbers) / len(numbers)

def calculate_median(numbers):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –º–µ–¥–∏–∞–Ω—É —Å–ø–∏—Å–∫–∞.
    
    Args:
        numbers: —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
        
    Returns:
        float: –º–µ–¥–∏–∞–Ω–∞
    """
    if not numbers:
        return 0
    
    sorted_numbers = sorted(numbers)
    n = len(sorted_numbers)
    
    if n % 2 == 1:
        # –ù–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        return sorted_numbers[n // 2]
    else:
        # –ß–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        mid = n // 2
        return (sorted_numbers[mid - 1] + sorted_numbers[mid]) / 2

def calculate_mode(numbers):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –º–æ–¥—É —Å–ø–∏—Å–∫–∞ (–Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–µ–µ—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ).
    
    Args:
        numbers: —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
        
    Returns:
        list: —Å–ø–∏—Å–æ–∫ –º–æ–¥–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)
    """
    if not numbers:
        return []
    
    counter = Counter(numbers)
    max_count = max(counter.values())
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–æ—Ç–æ–π
    return [num for num, count in counter.items() if count == max_count]

def calculate_range(numbers):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω —Å–ø–∏—Å–∫–∞ (—Ä–∞–∑–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º–∏).
    
    Args:
        numbers: —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
        
    Returns:
        float: –¥–∏–∞–ø–∞–∑–æ–Ω
    """
    if not numbers:
        return 0
    return max(numbers) - min(numbers)

def calculate_variance(numbers):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –¥–∏—Å–ø–µ—Ä—Å–∏—é —Å–ø–∏—Å–∫–∞.
    
    Args:
        numbers: —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
        
    Returns:
        float: –¥–∏—Å–ø–µ—Ä—Å–∏—è
    """
    if len(numbers) < 2:
        return 0
    
    mean = calculate_mean(numbers)
    squared_differences = [(x - mean) ** 2 for x in numbers]
    return sum(squared_differences) / len(numbers)

def calculate_std(numbers):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞.
    
    Args:
        numbers: —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
        
    Returns:
        float: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
    """
    return math.sqrt(calculate_variance(numbers))

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
if __name__ == "__main__": # 
    test_data = [1, 2, 3, 4, 5, 5, 6, 7, 8, 9]
    
    print(f"–°–ø–∏—Å–æ–∫: {test_data}")
    print(f"–°—Ä–µ–¥–Ω–µ–µ: {calculate_mean(test_data):.2f}")
    print(f"–ú–µ–¥–∏–∞–Ω–∞: {calculate_median(test_data):.2f}")
    print(f"–ú–æ–¥–∞: {calculate_mode(test_data)}")
    print(f"–î–∏–∞–ø–∞–∑–æ–Ω: {calculate_range(test_data)}")
    print(f"–î–∏—Å–ø–µ—Ä—Å–∏—è: {calculate_variance(test_data):.2f}")
    print(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {calculate_std(test_data):.2f}")
    
    print("\n" + "="*50)
    
    # –¢–µ—Å—Ç —Å –¥—Ä—É–≥–∏–º —Å–ø–∏—Å–∫–æ–º
    test_data2 = [1, 1, 2, 2, 3, 3, 4, 4]  # –ù–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥
    
    print(f"–°–ø–∏—Å–æ–∫: {test_data2}")
    print(f"–°—Ä–µ–¥–Ω–µ–µ: {calculate_mean(test_data2):.2f}")
    print(f"–ú–µ–¥–∏–∞–Ω–∞: {calculate_median(test_data2):.2f}")
    print(f"–ú–æ–¥–∞: {calculate_mode(test_data2)}")
    print(f"–î–∏–∞–ø–∞–∑–æ–Ω: {calculate_range(test_data2)}")
    print(f"–î–∏—Å–ø–µ—Ä—Å–∏—è: {calculate_variance(test_data2):.2f}")
    print(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {calculate_std(test_data2):.2f}")


# –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: –£—Ä–æ–≤–µ–Ω—å 3
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_prime, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ –ø—Ä–æ—Å—Ç—ã–º.
def is_prime(n):
    if n <= 1:
        return False
    
    for i in range(2, n):
        if n % i == 0:
            return False
    return True
    
print(is_prime(2))
#------------------------------------------------------------------------------
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ.
def is_unique(lst):
    return len(lst) == set(lst)
print(is_unique([1,2,3,3,1,23]))
#--------------------------------------------------------------------------------
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—Å–µ –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ –∏–º–µ—é—Ç –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö.
def check_type(lst):
    first_item = type(lst[0])

    return all(type(item)==first_item for item in lst)

print(check_type([3,2,5,2,3,5,1,1]))
#------------------------------------------------------------------------------------
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, 
# –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–æ–ø—É—Å—Ç–∏–º–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π Python.
def is_allow(s):
    from keyword import iskeyword
    return s.isidentifier(), iskeyword(s)

print(is_allow('hello'))
#--------------------------------------------------------------------------------------
# –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–∞–ø–∫—É –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª countries_data.py.
# –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º ¬´—Å–∞–º—ã–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã–µ —è–∑—ã–∫–∏ –º–∏—Ä–∞¬ª. –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 10 –∏–ª–∏ 20 —Å–∞–º—ã—Ö —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤ –º–∏—Ä–∞ –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è.
from countries_data import data
def most_spoken_languages():
    d = {}
    for country in data:
        languages = country.get('languages', [])

        for language in languages:
            if language not in d:
                d[language] = 1
            else:
                d[language] +=1
    for key, value in sorted(d.items(), key=lambda x: x[1], reverse=True)[:10]:
        print(key, value)

most_spoken_languages()
# –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é most_populated_countries. –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 10 –∏–ª–∏ 20 —Å—Ç—Ä–∞–Ω —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è.

def most_populated_countries():
    statistics = []

    for country in data:
        name = country.get('name', 'Uknown')
        population = country.get('population', 0)
        statistics.append((name, population))

    sort_st = sorted(statistics, key=lambda x: x[1], reverse=True)

    for i in sort_st[:10]:
        print(i)

most_populated_countries()





























